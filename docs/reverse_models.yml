#  安装
#  go get -u -v xorm.io/reverse
#
#  使用
#  reverse -f example/reverse_models.yml
#
#  模板函数
#  UnTitle: 将单词的第一个字母大写。
#  Upper: 将单词转为全部大写。
#  TableMapper: 将表名转为结构体名的映射函数。
#  ColumnMapper: 将字段名转为结构体成员名的函数。
#
#  模板变量
#  Tables: 所有表。
#  Imports: 所有需要的导入。

kind: reverse
name: mydb
source:
  database: mysql
  conn_str: "root:password@tcp(127.0.0.1:3306)/lh-gin?parseTime=true" # dsn
targets:
  - type: codes
    language: golang
    include_tables: # 包含的表，以下可以用 "**"
      - "**"
    exclude_tables: # 排除的表，以下可以用 "**"
      - none
    table_mapper: snake # 表名到代码类或结构体的映射关系
    column_mapper: snake # 字段名到代码或结构体成员的映射关系
    table_prefix: "" # 表前缀
    multiple_files: true # 是否生成多个文件
    table_name: true # 生成模板，如果这里定义了，优先级比 template_path 高
    template: |
      package models

      {{$ilen := len .Imports}}
      {{if gt $ilen 0}}
      import (
      {{range .Imports}}"{{.}}"{{end}}
      )
      {{end}}

      {{range .Tables}}
      type {{TableMapper .Name}} struct {
      {{$table := .}}
      {{range .ColumnsSeq}}{{$col := $table.GetColumn .}}	{{ColumnMapper $col.Name}}	{{Type $col}} `{{Tag $table $col}}`
      {{end}}
      }

      func (m *{{TableMapper .Name}}) TableName() string {
        return "{{$table.Name}}"
      }
      {{end}}
    template_path: ./template/goxorm.tmpl # 生成的模板的路径，优先级比 template 低，但比 language 中的默认模板高
    output_dir: ../models # 代码生成目录